[
  {
    "id": "slack-server",
    "name": "Slack MCP Server",
    "description": "Provides Slack messaging, channel management, and user interaction capabilities",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-slack"
    ],
    "installCommand": "npm install -g @modelcontextprotocol/server-slack",
    "requiresAuth": true,
    "capabilities": [
      "slack",
      "messaging",
      "channels",
      "chat",
      "users",
      "threads",
      "reactions"
    ],
    "requiredCredentials": [
      {
        "name": "SLACK_BOT_TOKEN",
        "description": "Slack Bot Token (starts with xoxb-)",
        "isSecret": true,
        "required": true
      },
      {
        "name": "SLACK_TEAM_ID",
        "description": "Slack Team ID (starts with T)",
        "isSecret": false,
        "required": true
      }
    ],
    "tools": {
      "slack_list_channels": {
        "name": "slack_list_channels",
        "description": "List public channels in the workspace",
        "inputSchema": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number",
              "description": "Maximum number of channels to return"
            },
            "cursor": {
              "type": "string",
              "description": "Pagination cursor for next page"
            }
          },
          "required": []
        }
      },
      "slack_post_message": {
        "name": "slack_post_message",
        "description": "Post a new message to a Slack channel",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The ID of the channel to post to"
            },
            "text": {
              "type": "string",
              "description": "The message text to post"
            }
          },
          "required": [
            "channel_id",
            "text"
          ]
        }
      }
    }
  },
  {
    "id": "gdrive-server",
    "name": "Google Drive MCP Server",
    "description": "Provides access to Google Drive files, documents, and spreadsheets",
    "command": "npx",
    "args": [
      "-y",
      "@isaacphi/mcp-gdrive"
    ],
    "installCommand": "npm install -g @isaacphi/mcp-gdrive",
    "requiresAuth": true,
    "capabilities": [
      "gdrive",
      "files",
      "documents",
      "sheets",
      "spreadsheets",
      "folders",
      "docs"
    ],
    "requiredCredentials": [
      {
        "name": "CLIENT_ID",
        "description": "Google OAuth Client ID",
        "isSecret": false,
        "required": true
      },
      {
        "name": "CLIENT_SECRET",
        "description": "Google OAuth Client Secret",
        "isSecret": true,
        "required": true
      },
      {
        "name": "GDRIVE_CREDS_DIR",
        "description": "Directory path to store Google Drive credentials",
        "isSecret": false,
        "required": true
      }
    ],
    "tools": {
      "gdrive_list_files": {
        "name": "gdrive_list_files",
        "description": "List files in Google Drive",
        "inputSchema": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number",
              "description": "Maximum number of files to return"
            },
            "query": {
              "type": "string",
              "description": "Search query"
            }
          },
          "required": []
        }
      },
      "gdrive_update_cell": {
        "name": "gdrive_update_cell",
        "description": "Update a single cell in a Google Sheet",
        "inputSchema": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "ID of the spreadsheet"
            },
            "range": {
              "type": "string",
              "description": "Cell range in A1 notation (e.g., 'Sheet1!A1')"
            },
            "value": {
              "type": "string",
              "description": "New cell value"
            }
          },
          "required": [
            "fileId",
            "range",
            "value"
          ]
        }
      }
    }
  },
  {
    "id": "brave-search",
    "name": "Brave Search MCP Server",
    "description": "Provides Brave Search API integration for web and local search capabilities",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-brave-search"
    ],
    "installCommand": "npm install -g @modelcontextprotocol/server-brave-search",
    "requiresAuth": true,
    "capabilities": [
      "search",
      "web-search",
      "local-search",
      "news",
      "articles"
    ],
    "requiredCredentials": [
      {
        "name": "BRAVE_API_KEY",
        "description": "Brave Search API Key",
        "isSecret": true,
        "required": true
      }
    ],
    "tools": {
      "brave_web_search": {
        "name": "brave_web_search",
        "description": "Execute web searches with pagination and filtering",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search terms"
            },
            "count": {
              "type": "number",
              "description": "Results per page (max 20)"
            },
            "offset": {
              "type": "number",
              "description": "Pagination offset (max 9)"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "brave_local_search": {
        "name": "brave_local_search",
        "description": "Search for local businesses and services with automatic fallback to web search if no results found",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Local search terms"
            },
            "count": {
              "type": "number",
              "description": "Number of results (max 20)"
            }
          },
          "required": [
            "query"
          ]
        }
      }
    }
  },
  {
    "id": "everart",
    "name": "EverArt MCP Server",
    "description": "Image generation server using EverArt's API with multiple model options",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-everart"
    ],
    "installCommand": "npm install -g @modelcontextprotocol/server-everart",
    "requiresAuth": true,
    "capabilities": [
      "image-generation",
      "ai-art",
      "stable-diffusion",
      "recraft"
    ],
    "requiredCredentials": [
      {
        "name": "EVERART_API_KEY",
        "description": "EverArt API Key",
        "isSecret": true,
        "required": true
      }
    ],
    "tools": {
      "generate_image": {
        "name": "generate_image",
        "description": "Generates images with multiple model options. Opens result in browser and returns URL. All images generated at 1024x1024.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "prompt": {
              "type": "string",
              "description": "Image description"
            },
            "model": {
              "type": "string",
              "description": "Model ID (5000: FLUX1.1, 9000: FLUX1.1-ultra, 6000: SD3.5, 7000: Recraft-Real, 8000: Recraft-Vector)",
              "default": "5000"
            },
            "image_count": {
              "type": "number",
              "description": "Number of images to generate",
              "default": 1
            }
          },
          "required": [
            "prompt"
          ]
        }
      }
    }
  },
  {
    "id": "postgres",
    "name": "PostgreSQL MCP Server",
    "description": "Provides read-only access to PostgreSQL databases, enabling inspection of database schemas and execution of read-only queries",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-postgres",
      "postgresql://localhost/mydb"
    ],
    "installCommand": "npm install -g @modelcontextprotocol/server-postgres",
    "requiresAuth": false,
    "capabilities": [
      "database",
      "postgresql",
      "sql",
      "read-only",
      "schema-inspection"
    ],
    "tools": {
      "query": {
        "name": "query",
        "description": "Execute read-only SQL queries against the connected database. All queries are executed within a READ ONLY transaction.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "sql": {
              "type": "string",
              "description": "The SQL query to execute (read-only)"
            }
          },
          "required": [
            "sql"
          ]
        }
      }
    }
  },
  {
    "id": "google-maps",
    "name": "Google Maps MCP Server",
    "description": "Provides access to Google Maps API features including geocoding, places search, directions, and more",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-google-maps"
    ],
    "installCommand": "npm install -g @modelcontextprotocol/server-google-maps",
    "requiresAuth": true,
    "capabilities": [
      "maps",
      "geocoding",
      "places",
      "directions",
      "distance-matrix",
      "elevation"
    ],
    "requiredCredentials": [
      {
        "name": "GOOGLE_MAPS_API_KEY",
        "description": "Google Maps API Key",
        "isSecret": true,
        "required": true
      }
    ],
    "tools": {
      "maps_geocode": {
        "name": "maps_geocode",
        "description": "Convert address to coordinates",
        "inputSchema": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Address to geocode"
            }
          },
          "required": [
            "address"
          ]
        }
      },
      "maps_reverse_geocode": {
        "name": "maps_reverse_geocode",
        "description": "Convert coordinates to address",
        "inputSchema": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "description": "Latitude coordinate"
            },
            "longitude": {
              "type": "number",
              "description": "Longitude coordinate"
            }
          },
          "required": [
            "latitude",
            "longitude"
          ]
        }
      },
      "maps_search_places": {
        "name": "maps_search_places",
        "description": "Search for places using text query",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query for places"
            },
            "location": {
              "type": "object",
              "description": "Optional center point for search",
              "properties": {
                "latitude": {
                  "type": "number",
                  "description": "Latitude coordinate"
                },
                "longitude": {
                  "type": "number",
                  "description": "Longitude coordinate"
                }
              }
            },
            "radius": {
              "type": "number",
              "description": "Search radius in meters (max 50000)"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "maps_place_details": {
        "name": "maps_place_details",
        "description": "Get detailed information about a place",
        "inputSchema": {
          "type": "object",
          "properties": {
            "place_id": {
              "type": "string",
              "description": "Google Place ID"
            }
          },
          "required": [
            "place_id"
          ]
        }
      },
      "maps_distance_matrix": {
        "name": "maps_distance_matrix",
        "description": "Calculate distances and times between points",
        "inputSchema": {
          "type": "object",
          "properties": {
            "origins": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of origin addresses"
            },
            "destinations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of destination addresses"
            },
            "mode": {
              "type": "string",
              "enum": [
                "driving",
                "walking",
                "bicycling",
                "transit"
              ],
              "description": "Travel mode"
            }
          },
          "required": [
            "origins",
            "destinations"
          ]
        }
      },
      "maps_elevation": {
        "name": "maps_elevation",
        "description": "Get elevation data for locations",
        "inputSchema": {
          "type": "object",
          "properties": {
            "locations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ]
              },
              "description": "Array of locations to get elevation data for"
            }
          },
          "required": [
            "locations"
          ]
        }
      },
      "maps_directions": {
        "name": "maps_directions",
        "description": "Get directions between points",
        "inputSchema": {
          "type": "object",
          "properties": {
            "origin": {
              "type": "string",
              "description": "Starting address or location"
            },
            "destination": {
              "type": "string",
              "description": "Ending address or location"
            },
            "mode": {
              "type": "string",
              "enum": [
                "driving",
                "walking",
                "bicycling",
                "transit"
              ],
              "description": "Travel mode"
            }
          },
          "required": [
            "origin",
            "destination"
          ]
        }
      }
    }
  },
  {
    "id": "puppeteer",
    "name": "Puppeteer MCP Server",
    "description": "Browser automation server using Puppeteer, enabling web page interaction, screenshots, and JavaScript execution in a real browser environment",
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-puppeteer"
    ],
    "installCommand": "npm install -g @modelcontextprotocol/server-puppeteer",
    "requiresAuth": false,
    "capabilities": [
      "browser-automation",
      "screenshots",
      "web-interaction",
      "javascript-execution",
      "console-monitoring"
    ],
    "tools": {
      "puppeteer_navigate": {
        "name": "puppeteer_navigate",
        "description": "Navigate to any URL in the browser",
        "inputSchema": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL to navigate to"
            },
            "launchOptions": {
              "type": "object",
              "description": "PuppeteerJS LaunchOptions. Default null. If changed and not null, browser restarts",
              "additionalProperties": true
            },
            "allowDangerous": {
              "type": "boolean",
              "description": "Allow dangerous LaunchOptions that reduce security. When false, dangerous args like --no-sandbox, --disable-web-security will throw errors",
              "default": false
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "puppeteer_screenshot": {
        "name": "puppeteer_screenshot",
        "description": "Capture screenshots of the entire page or specific elements",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name for the screenshot"
            },
            "selector": {
              "type": "string",
              "description": "CSS selector for element to screenshot"
            },
            "width": {
              "type": "number",
              "description": "Screenshot width",
              "default": 800
            },
            "height": {
              "type": "number",
              "description": "Screenshot height",
              "default": 600
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "puppeteer_click": {
        "name": "puppeteer_click",
        "description": "Click elements on the page",
        "inputSchema": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for element to click"
            }
          },
          "required": [
            "selector"
          ]
        }
      },
      "puppeteer_hover": {
        "name": "puppeteer_hover",
        "description": "Hover elements on the page",
        "inputSchema": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for element to hover"
            }
          },
          "required": [
            "selector"
          ]
        }
      },
      "puppeteer_fill": {
        "name": "puppeteer_fill",
        "description": "Fill out input fields",
        "inputSchema": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for input field"
            },
            "value": {
              "type": "string",
              "description": "Value to fill"
            }
          },
          "required": [
            "selector",
            "value"
          ]
        }
      },
      "puppeteer_select": {
        "name": "puppeteer_select",
        "description": "Select an element with SELECT tag",
        "inputSchema": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for element to select"
            },
            "value": {
              "type": "string",
              "description": "Value to select"
            }
          },
          "required": [
            "selector",
            "value"
          ]
        }
      },
      "puppeteer_evaluate": {
        "name": "puppeteer_evaluate",
        "description": "Execute JavaScript in the browser console",
        "inputSchema": {
          "type": "object",
          "properties": {
            "script": {
              "type": "string",
              "description": "JavaScript code to execute"
            }
          },
          "required": [
            "script"
          ]
        }
      }
    }
  },
  {
    "id": "sqlite",
    "name": "SQLite MCP Server",
    "description": "Provides database interaction and business intelligence capabilities through SQLite, enabling SQL queries, data analysis, and automatic business insight generation",
    "command": "uv",
    "args": [
      "--directory",
      "parent_of_servers_repo/servers/src/sqlite",
      "run",
      "mcp-server-sqlite",
      "--db-path",
      "~/test.db"
    ],
    "installCommand": "pip install mcp-server-sqlite",
    "requiresAuth": false,
    "capabilities": [
      "database",
      "sqlite",
      "sql",
      "business-intelligence",
      "data-analysis",
      "insights"
    ],
    "tools": {
      "read_query": {
        "name": "read_query",
        "description": "Execute SELECT queries to read data from the database",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The SELECT SQL query to execute"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "write_query": {
        "name": "write_query",
        "description": "Execute INSERT, UPDATE, or DELETE queries",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The SQL modification query"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "create_table": {
        "name": "create_table",
        "description": "Create new tables in the database",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "CREATE TABLE SQL statement"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "list_tables": {
        "name": "list_tables",
        "description": "Get a list of all tables in the database",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "required": []
        }
      },
      "describe_table": {
        "name": "describe_table",
        "description": "View schema information for a specific table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "table_name": {
              "type": "string",
              "description": "Name of table to describe"
            }
          },
          "required": [
            "table_name"
          ]
        }
      },
      "append_insight": {
        "name": "append_insight",
        "description": "Add new business insights to the memo resource",
        "inputSchema": {
          "type": "object",
          "properties": {
            "insight": {
              "type": "string",
              "description": "Business insight discovered from data analysis"
            }
          },
          "required": [
            "insight"
          ]
        }
      }
    }
  },
  {
    "id": "chroma",
    "name": "Chroma MCP Server",
    "description": "Vector database server providing collection management, document operations, and semantic search capabilities powered by Chroma",
    "command": "uvx",
    "args": [
      "chroma-mcp"
    ],
    "installCommand": "pip install chroma-mcp",
    "requiresAuth": false,
    "capabilities": [
      "vector-database",
      "semantic-search",
      "document-management",
      "embeddings",
      "metadata-filtering",
      "full-text-search"
    ],
    "tools": {
      "chroma_list_collections": {
        "name": "chroma_list_collections",
        "description": "List all collections with pagination support",
        "inputSchema": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number",
              "description": "Maximum number of collections to return"
            },
            "offset": {
              "type": "number",
              "description": "Pagination offset"
            }
          },
          "required": []
        }
      },
      "chroma_create_collection": {
        "name": "chroma_create_collection",
        "description": "Create a new collection with optional HNSW configuration",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the collection"
            },
            "metadata": {
              "type": "object",
              "description": "Optional metadata for the collection",
              "additionalProperties": true
            },
            "embedding_function": {
              "type": "string",
              "description": "Embedding function to use (default, cohere, openai, jina, voyageai, roboflow)",
              "default": "default"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "chroma_peek_collection": {
        "name": "chroma_peek_collection",
        "description": "View a sample of documents in a collection",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            },
            "limit": {
              "type": "number",
              "description": "Number of documents to peek",
              "default": 10
            }
          },
          "required": [
            "collection_name"
          ]
        }
      },
      "chroma_get_collection_info": {
        "name": "chroma_get_collection_info",
        "description": "Get detailed information about a collection",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            }
          },
          "required": [
            "collection_name"
          ]
        }
      },
      "chroma_get_collection_count": {
        "name": "chroma_get_collection_count",
        "description": "Get the number of documents in a collection",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            }
          },
          "required": [
            "collection_name"
          ]
        }
      },
      "chroma_modify_collection": {
        "name": "chroma_modify_collection",
        "description": "Update a collection's name or metadata",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Current name of the collection"
            },
            "new_name": {
              "type": "string",
              "description": "New name for the collection"
            },
            "metadata": {
              "type": "object",
              "description": "New metadata for the collection",
              "additionalProperties": true
            }
          },
          "required": [
            "collection_name"
          ]
        }
      },
      "chroma_delete_collection": {
        "name": "chroma_delete_collection",
        "description": "Delete a collection",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection to delete"
            }
          },
          "required": [
            "collection_name"
          ]
        }
      },
      "chroma_add_documents": {
        "name": "chroma_add_documents",
        "description": "Add documents with optional metadata and custom IDs",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            },
            "documents": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of document contents"
            },
            "metadata": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": true
              },
              "description": "Array of metadata objects for each document"
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional array of custom IDs for the documents"
            }
          },
          "required": [
            "collection_name",
            "documents"
          ]
        }
      },
      "chroma_query_documents": {
        "name": "chroma_query_documents",
        "description": "Query documents using semantic search with advanced filtering",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            },
            "query_texts": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of query texts"
            },
            "n_results": {
              "type": "number",
              "description": "Number of results to return per query",
              "default": 10
            },
            "where": {
              "type": "object",
              "description": "Optional metadata filter conditions",
              "additionalProperties": true
            }
          },
          "required": [
            "collection_name",
            "query_texts"
          ]
        }
      },
      "chroma_get_documents": {
        "name": "chroma_get_documents",
        "description": "Retrieve documents by IDs or filters with pagination",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of document IDs to retrieve"
            },
            "where": {
              "type": "object",
              "description": "Optional metadata filter conditions",
              "additionalProperties": true
            },
            "limit": {
              "type": "number",
              "description": "Maximum number of documents to return"
            },
            "offset": {
              "type": "number",
              "description": "Pagination offset"
            }
          },
          "required": [
            "collection_name"
          ]
        }
      },
      "chroma_update_documents": {
        "name": "chroma_update_documents",
        "description": "Update existing documents' content, metadata, or embeddings",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of document IDs to update"
            },
            "documents": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "New document contents"
            },
            "metadata": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": true
              },
              "description": "New metadata for the documents"
            }
          },
          "required": [
            "collection_name",
            "ids"
          ]
        }
      },
      "chroma_delete_documents": {
        "name": "chroma_delete_documents",
        "description": "Delete specific documents from a collection",
        "inputSchema": {
          "type": "object",
          "properties": {
            "collection_name": {
              "type": "string",
              "description": "Name of the collection"
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of document IDs to delete"
            },
            "where": {
              "type": "object",
              "description": "Optional metadata filter conditions for deletion",
              "additionalProperties": true
            }
          },
          "required": [
            "collection_name"
          ]
        }
      }
    }
  },
  {
    "id": "exa",
    "name": "Exa MCP Server",
    "description": "Provides web search capabilities powered by Exa's AI Search API, enabling real-time web searches, research paper search, Twitter search, company research, and web crawling",
    "command": "npx",
    "args": [
      "-y",
      "exa-mcp-server"
    ],
    "installCommand": "npm install -g exa-mcp-server",
    "requiresAuth": true,
    "capabilities": [
      "web-search",
      "research-papers",
      "twitter-search",
      "company-research",
      "web-crawling",
      "competitor-analysis"
    ],
    "requiredCredentials": [
      {
        "name": "EXA_API_KEY",
        "description": "Exa API Key from dashboard.exa.ai/api-keys",
        "isSecret": true,
        "required": true
      }
    ],
    "tools": {
      "web_search": {
        "name": "web_search",
        "description": "Performs real-time web searches with optimized results and content extraction",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "research_paper_search": {
        "name": "research_paper_search",
        "description": "Specialized search focused on academic papers and research content",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Research paper search query"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "twitter_search": {
        "name": "twitter_search",
        "description": "Dedicated Twitter/X.com search that finds tweets, profiles, and conversations",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Twitter search query"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "company_research": {
        "name": "company_research",
        "description": "Comprehensive company research tool that crawls company websites to gather detailed information about businesses",
        "inputSchema": {
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "description": "Company name or website"
            }
          },
          "required": [
            "company"
          ]
        }
      },
      "crawling": {
        "name": "crawling",
        "description": "Extracts content from specific URLs, useful for reading articles, PDFs, or any web page",
        "inputSchema": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL to crawl and extract content from"
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "competitor_finder": {
        "name": "competitor_finder",
        "description": "Identifies competitors of a company by searching for businesses offering similar products or services",
        "inputSchema": {
          "type": "object",
          "properties": {
            "company": {
              "type": "string",
              "description": "Company to find competitors for"
            },
            "exclude": {
              "type": "string",
              "description": "Company to exclude from results"
            }
          },
          "required": [
            "company"
          ]
        }
      }
    }
  }
]